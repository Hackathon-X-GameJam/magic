package tui

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/Liphium/magic/integration"
	"github.com/Liphium/magic/mconfig"
	"github.com/Liphium/magic/mrunner"
)

const defaultScriptRunFile = `// Automagically generated by Magic
package main

import (
	"os"
	"log"
	
	"github.com/Liphium/magic/mconfig"
)

func main() {
	if len(os.Args) < 2 {
		log.Fatalln("Please provide the plan as a command line argument (in printable form).")
	}

	// Parse the plan
	plan, err := mconfig.FromPrintable(os.Args[1])
	if err != nil {
		log.Fatalln("Couldn't parse printable plan:", err)
	}

	// Run the script
	Run%s(plan)
}
`

// Command: run [path]
func runCommand(fp string, console *sPipe) error {
	wOld, err := os.Getwd()
	if err != nil {
		return fmt.Errorf("couldn't get working directory: %s", err)
	}

	// Get the magic directory
	mDir, err := integration.GetMagicDirectory(5) // because cwd is inside ./magic/cache/config_default
	if err != nil {
		return fmt.Errorf("can't get magic directory: %s", err)
	}
	originalFp := fp
	fp = filepath.Join(mDir, "scripts", fp)

	// Verify the file path
	_, fileName, path, err := integration.EvaluatePath(fp)
	if err != nil {
		return fmt.Errorf("can't find %s: %s", fp, err)
	}

	// Run the script
	if err := mrunner.GoToCache(); err != nil {
		return fmt.Errorf("can't go to cache: %s", err)
	}

	// Generate the folder for the script
	if err := mrunner.GenerateScriptFolder(strings.ReplaceAll(strings.TrimRight(originalFp, ".go"), "/", "_")); err != nil {
		return fmt.Errorf("couldn't generate script folder: %s", err)
	}

	// Copy the script file into the folder
	if err := mrunner.CopyFileAndReplacePackage(path, "magic_scripts", "main"); err != nil {
		return fmt.Errorf("couldn't copy script file: %s", err)
	}

	// Copy mod file into the script's execution directory
	version, err := mrunner.GenGoMod(mDir, func(s string) {
		console.AddItem(s)
	})
	if err != nil {
		return fmt.Errorf("couldn't copy mod file: %s", err)
	}

	// Generate a run file to run the script
	scriptName := strings.TrimRight(fileName, ".go")
	content := fmt.Sprintf(defaultScriptRunFile, integration.SnakeToCamelCase(scriptName, true))
	if err := integration.CreateFileWithContent("run_magic_script.go", content); err != nil {
		return fmt.Errorf("couldn't create script run file: %s", err)
	}

	// Update or create work file
	if err := mrunner.HandleWorkFile(version); err != nil {
		return fmt.Errorf("couldn't update/create work file: %s", err)
	}

	// Import all dependencies
	if err := mrunner.ImportDependencies(func(s string) {
		console.AddItem(s)
	}); err != nil {
		return fmt.Errorf("can't import dependencies: %s", err)
	}

	// Run the script
	console.AddItem("Executing script " + fp + "...")
	printable, err := mconfig.CurrentPlan.ToPrintable()
	if err != nil {
		return fmt.Errorf("couldn't stringify plan: %s", err)
	}
	if err := integration.ExecCmdWithFuncStart(func(s string) {
		console.AddItem(s)
	}, func() {
		if err = os.Chdir(wOld); err != nil {
			console.AddItem(MagicPanicPrefix + "ERROR: couldn't change working directory: " + err.Error())
		}
	}, "go", "run", ".", printable); err != nil {
		return fmt.Errorf("couldn't run script: %s", err)
	}
	console.AddItem("Successfully executed script " + fp + ".")

	return nil
}
